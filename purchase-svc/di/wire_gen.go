// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/Chengxufeng1994/go-saga-example/common/bootstrap"
	"github.com/Chengxufeng1994/go-saga-example/common/config"
	config2 "github.com/Chengxufeng1994/go-saga-example/purchase-svc/config"
	broker2 "github.com/Chengxufeng1994/go-saga-example/purchase-svc/internal/adapter/broker"
	grpc2 "github.com/Chengxufeng1994/go-saga-example/purchase-svc/internal/adapter/grpc"
	"github.com/Chengxufeng1994/go-saga-example/purchase-svc/internal/application"
	"github.com/Chengxufeng1994/go-saga-example/purchase-svc/internal/server"
	"github.com/Chengxufeng1994/go-saga-example/purchase-svc/internal/server/broker"
	"github.com/Chengxufeng1994/go-saga-example/purchase-svc/internal/server/grpc"
	"github.com/Chengxufeng1994/go-saga-example/purchase-svc/internal/server/http"
	"github.com/Chengxufeng1994/go-saga-example/purchase-svc/internal/server/observe"
)

// Injectors from wire.go:

func InitApplicationConfig(path string) *config.ApplicationConfig {
	applicationConfig := config.LoadApplicationConfig(path)
	return applicationConfig
}

func InitBootstrapConfig(path string) *bootstrap.BootstrapConfig {
	bootstrapConfig := bootstrap.LoadBootstrapConfig(path)
	return bootstrapConfig
}

func InitializeServer(appCfg *config.ApplicationConfig, bootCfg *bootstrap.BootstrapConfig) *server.Server {
	engine := http.NewGinEngine(bootCfg)
	logger := config2.InitLogger(appCfg, bootCfg)
	authConn := grpc.NewAuthConn(logger, appCfg)
	authRepository := grpc2.NewGrpcAuthRepository(authConn)
	authUseCase := application.NewAuthService(logger, authRepository)
	productConn := grpc.NewProductConn(logger, appCfg)
	productRepository := grpc2.NewGrpcProductRepository(productConn)
	publisher := broker.NewNatsPublisher(appCfg)
	purchasingRepository := broker2.NewNatsNatsPurchasePublisher(publisher)
	purchaseUseCase := application.NewPurchaseService(logger, productRepository, purchasingRepository)
	applicationApplication := application.New(authUseCase, purchaseUseCase)
	router := http.NewRouter(logger, engine, applicationApplication)
	httpServer := http.New(bootCfg, engine, router)
	tracerProvider := observe.NewTracer(bootCfg, appCfg)
	serverServer := server.New(httpServer, tracerProvider)
	return serverServer
}
